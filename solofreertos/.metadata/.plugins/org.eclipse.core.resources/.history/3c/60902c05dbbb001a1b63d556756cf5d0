/*/*
 * Modified form FreeRTOS Blinky example
 *
 * @note
 * Copyright(C) NXP Semiconductors, 2013
 * All rights reserved.
 *
 * @par
 * Software that is described herein is for illustrative purposes only
 * which provides customers with programming information regarding the
 * LPC products.  This software is supplied "AS IS" without any warranties of
 * any kind, and NXP Semiconductors and its licensor disclaim any and
 * all warranties, express or implied, including all implied warranties of
 * merchantability, fitness for a particular purpose and non-infringement of
 * intellectual property rights.  NXP Semiconductors assumes no responsibility
 * or liability for the use of the software, conveys no license or rights under any
 * patent, copyright, mask work right, or any other intellectual property rights in
 * or to any products. NXP Semiconductors reserves the right to make changes
 * in the software without notification. NXP Semiconductors also makes no
 * representation or warranty that such application will be suitable for the
 * specified use without further testing or modification.
 *
 * @par
 * Permission to use, copy, modify, and distribute this software and its
 * documentation is hereby granted, under NXP Semiconductors' and its
 * licensor's relevant copyrights in the software, without fee, provided that it
 * is used in conjunction with NXP Semiconductors microcontrollers.  This
 * copyright, permission, and disclaimer notice must appear in all copies of
 * this code.
 */

#include "FreeRTOS.h"
#include "task.h"
#include "chip.h"
/*****************************************************************************
 * Private types/enumerations/variables
 ****************************************************************************/

/*****************************************************************************
 * Public types/enumerations/variables
 ****************************************************************************/
const int LED1[2] = {3, 7}; //El led1 correspond al GPIO3 bit7
const int LED2[2] = {3, 6}; //El led2 correspond al GPIO3 bit 6
const int LED3[2] = {3, 5}; //El led3 corresponde al GPIO1 bit 12
const int LEDA[2] = {2, 8}; //El led A corresponde al GPIO2 bit 8


const int TEC1[2] = {3, 12}; // Pulsador 1 corresponde a GPIO 3 bit 12
const int TEC2[2] = {3, 10}; // Pulsador 2 corresponde a GPIO 3 bit 10
const int TEC3[2] = {3, 11}; // Pulsador 3 corresponde a GPIO 3 bit 11
const int TEC4[2] = {3, 9}; // Pulsador 4 corresponde a GPIO 3 bit 9


/*****************************************************************************
 * Private functions
 ****************************************************************************/
/* System configuration variables used by chip driver */

//Estas dos lineas se sacaron del board.h
const uint32_t ExtRateIn = 0;
const uint32_t OscRateIn = 12000000;


TaskHandle_t handlerLed1 = NULL;
TaskHandle_t handlerLed2 = NULL;
TaskHandle_t handlerLed3 = NULL;

/* Sets up system hardware */
static void prvSetupHardware(void)
{
	SystemCoreClockUpdate();
	Chip_GPIO_Init(LPC_GPIO_PORT);

	Chip_SCU_PinMuxSet(6,  9, SCU_MODE_FUNC0 | SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN);
	Chip_SCU_PinMuxSet(6, 10, SCU_MODE_FUNC0 | SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN);
	Chip_SCU_PinMuxSet(6, 11, SCU_MODE_FUNC0 | SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN);//LED1
	Chip_SCU_PinMuxSet(6, 12, SCU_MODE_FUNC0 | SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN);//LEDA

	Chip_SCU_PinMuxSet(7, 4,  SCU_MODE_FUNC0 | SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN); //tecA joystick
	Chip_SCU_PinMuxSet(7, 3,  SCU_MODE_FUNC0 | SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN); //tecB joystick
	Chip_SCU_PinMuxSet(7, 2,  SCU_MODE_FUNC0 | SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN); //tecC joystick
	Chip_SCU_PinMuxSet(7, 1,  SCU_MODE_FUNC0 | SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN); //tecD joystick

	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, LEDA[0], LEDA[1]);//Configuro el GPIO como salida para los leds
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, LED1[0], LED1[1]);
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, LED2[0], LED2[1]);
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, LED3[0], LED3[1]);

	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, TEC1[0], TEC1[1]); //Configuro el GPIO como entrada para pulsadores
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, TEC3[0], TEC3[1]);
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, TEC2[0], TEC2[1]);
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, TEC4[0], TEC4[1]);
}


/*Tarea secuencia derecha*/
static void vLed1Task1(void *pvParameters) {
	Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED1[0], LED1[1], false);
	vTaskDelay(300 * configTICK_RATE_HZ / 1000);
	Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED1[0], LED1[1], true);
	vTaskDelay(300 * configTICK_RATE_HZ / 1000);

	while (1) {
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, 1, 11, true);
	}
}



/*Tarea secuencia izquierda*/
static void vLed2Task2(void *pvParameters) {


	while (1)
	{
		while (!Chip_GPIO_GetPinState(LPC_GPIO_PORT, TEC2[0], TEC2[1]))
		{
			//incremento contador de delays aca
		}

		//La secuencia a seguir es: azul, LED1, LED2, LED3
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LEDA[0], LEDA[1], false);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED1[0], LED1[1], false);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED2[0], LED2[1], false);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED3[0], LED3[1], true);
		vTaskDelay(delay1 * configTICK_RATE_HZ / 1000);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LEDA[0], LEDA[1], false);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED1[0], LED1[1], false);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED2[0], LED2[1], true);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED3[0], LED3[1], false);
		vTaskDelay(delay1 * configTICK_RATE_HZ / 1000);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LEDA[0], LEDA[1], false);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED1[0], LED1[1], true);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED2[0], LED2[1], false);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED3[0], LED3[1], false);
		vTaskDelay(delay1 * configTICK_RATE_HZ / 1000);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LEDA[0], LEDA[1], true);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED1[0], LED1[1], false);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED2[0], LED2[1], false);
		Chip_GPIO_SetPinState(LPC_GPIO_PORT, LED3[0], LED3[1], false);
		vTaskDelay(delay1 * configTICK_RATE_HZ / 1000);
	}
}


/*Tarea secuencia izquierda*/
static void vLed3Task3(void *pvParameters) {
	while (1)
	{
		/*if (!Chip_GPIO_GetPinState(LPC_GPIO_PORT, TEC3[0], TEC3[1]))
		{
			delay1 = 750;
		}

		if (!Chip_GPIO_GetPinState(LPC_GPIO_PORT, TEC4[0], TEC4[1]) && secuencia == 0) //tec4 = suspendo task1 y resumo task2
		{
			secuencia = 1;
			vTaskSuspend(handlerLed1);//suspendo la secuencia derecha
			vTaskResume(handlerLed1);
		}


		if (!Chip_GPIO_GetPinState(LPC_GPIO_PORT, TEC1[0], TEC1[1]) && secuencia == 1) //tec1 = suspendo task2 y resumo task1
		{
			secuencia = 0;
			vTaskSuspend(handlerLed1);//suspendo la secuencia izquierda
			vTaskResume(handlerLed1);
		}*/

	}
}
/*****************************************************************************
 * Public functions
 ****************************************************************************/

/**
 * @brief	main routine for FreeRTOS blinky example
 * @return	Nothing, function should not exit
 */
int main(void)
{
	prvSetupHardware();

	// Creo Tarea para LED1//
	xTaskCreate(vLed1Task1, "Led1", 200,
			NULL, tskIDLE_PRIORITY, &handlerLed1);

	// Creo Tarea LED2 //
 /* xTaskCreate(vLed2Task2, "Led2", 200,
			NULL, tskIDLE_PRIORITY, &handlerLed2);

	// Creo Tarea de control //
	xTaskCreate(vLed3Task3, "Led3", 200,
			NULL, tskIDLE_PRIORITY, &handlerControl);*/

	vTaskStartScheduler();

	/* Should never arrive here */
	return 1;
}


